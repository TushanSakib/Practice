***** In Order Traversal BST******

class Node:
    def __init__(self,data):
        self.data = data
        self.left = None
        self.right = None

    def insert(self, data):
        if self.data is None:
            self.data = data

        else:
            if self.data > data:
                if self.left is None:
                    self.left = Node(data)
                else:
                    self.left.insert(data)

            elif self.data < data:
                if self.right is None:
                    self.right = Node(data)
                else:
                    self.right.insert(data)

def in_order_print(root):
    if root is None:
        return
    else:
        in_order_print(root.left)
        print(root.data,end=' ')
        in_order_print(root.right)


if __name__ == '__main__':
    roots = Node('g')
    roots.insert('c')
    roots.insert('a')
    roots.insert('f')
    roots.insert('d')
    roots.insert('i')
    roots.insert('y')
    roots.insert('q')

in_order_print(roots)






